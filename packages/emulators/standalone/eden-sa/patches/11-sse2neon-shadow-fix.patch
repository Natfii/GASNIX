diff --git a/externals/sse2neon/sse2neon.h b/externals/sse2neon/sse2neon.h
index 66b93c1c7..a45b36ed8 100755
--- a/externals/sse2neon/sse2neon.h
+++ b/externals/sse2neon/sse2neon.h
@@ -8219,10 +8219,10 @@ FORCE_INLINE int _sse2neon_ctzll(unsigned long long x)
     } else {                                                                   \
         if (bound == 16) {                                                     \
             dst = vreinterpretq_m128i_u16(                                     \
-                vsetq_lane_u16(r2 & 0xffff, vreinterpretq_u16_m128i(dst), 0)); \
+                vsetq_lane_u16((uint16_t)(r2 & 0xffff), vreinterpretq_u16_m128i(dst), 0); \
         } else {                                                               \
             dst = vreinterpretq_m128i_u8(                                      \
-                vsetq_lane_u8(r2 & 0xff, vreinterpretq_u8_m128i(dst), 0));     \
+                vsetq_lane_u8((uint8_t)(r2 & 0xff), vreinterpretq_u8_m128i(dst), 0);  \
         }                                                                      \
     }                                                                          \
     return dst
@@ -9056,15 +9056,15 @@ FORCE_INLINE __m128i _mm_aesimc_si128(__m128i a)
 FORCE_INLINE __m128i _mm_aeskeygenassist_si128(__m128i a, const int rcon)
 {
     // AESE does ShiftRows and SubBytes on A
-    uint8x16_t u8 = vaeseq_u8(vreinterpretq_u8_m128i(a), vdupq_n_u8(0));
+    uint8x16_t u8t = vaeseq_u8(vreinterpretq_u8_m128i(a), vdupq_n_u8(0));
 
 #ifndef _MSC_VER
     uint8x16_t dest = {
         // Undo ShiftRows step from AESE and extract X1 and X3
-        u8[0x4], u8[0x1], u8[0xE], u8[0xB],  // SubBytes(X1)
-        u8[0x1], u8[0xE], u8[0xB], u8[0x4],  // ROT(SubBytes(X1))
-        u8[0xC], u8[0x9], u8[0x6], u8[0x3],  // SubBytes(X3)
-        u8[0x9], u8[0x6], u8[0x3], u8[0xC],  // ROT(SubBytes(X3))
+        u8t[0x4], u8t[0x1], u8t[0xE], u8t[0xB],  // SubBytes(X1)
+        u8t[0x1], u8t[0xE], u8t[0xB], u8t[0x4],  // ROT(SubBytes(X1))
+        u8t[0xC], u8t[0x9], u8t[0x6], u8t[0x3],  // SubBytes(X3)
+        u8t[0x9], u8t[0x6], u8t[0x3], u8t[0xC],  // ROT(SubBytes(X3))
     };
     uint32x4_t r = {0, (unsigned) rcon, 0, (unsigned) rcon};
     return vreinterpretq_m128i_u8(dest) ^ vreinterpretq_m128i_u32(r);
@@ -9075,20 +9075,20 @@ FORCE_INLINE __m128i _mm_aeskeygenassist_si128(__m128i a, const int rcon)
 
     // As per the Windows ARM64 ABI, it is always little endian, so this works
     __n128 dest{
-        ((uint64_t) u8.n128_u8[0x4] << 0) | ((uint64_t) u8.n128_u8[0x1] << 8) |
-            ((uint64_t) u8.n128_u8[0xE] << 16) |
-            ((uint64_t) u8.n128_u8[0xB] << 24) |
-            ((uint64_t) u8.n128_u8[0x1] << 32) |
-            ((uint64_t) u8.n128_u8[0xE] << 40) |
-            ((uint64_t) u8.n128_u8[0xB] << 48) |
-            ((uint64_t) u8.n128_u8[0x4] << 56),
-        ((uint64_t) u8.n128_u8[0xC] << 0) | ((uint64_t) u8.n128_u8[0x9] << 8) |
-            ((uint64_t) u8.n128_u8[0x6] << 16) |
-            ((uint64_t) u8.n128_u8[0x3] << 24) |
-            ((uint64_t) u8.n128_u8[0x9] << 32) |
-            ((uint64_t) u8.n128_u8[0x6] << 40) |
-            ((uint64_t) u8.n128_u8[0x3] << 48) |
-            ((uint64_t) u8.n128_u8[0xC] << 56)};
+        ((uint64_t) u8t.n128_u8[0x4] << 0) | ((uint64_t) u8t.n128_u8[0x1] << 8) |
+            ((uint64_t) u8t.n128_u8[0xE] << 16) |
+            ((uint64_t) u8t.n128_u8[0xB] << 24) |
+            ((uint64_t) u8t.n128_u8[0x1] << 32) |
+            ((uint64_t) u8t.n128_u8[0xE] << 40) |
+            ((uint64_t) u8t.n128_u8[0xB] << 48) |
+            ((uint64_t) u8t.n128_u8[0x4] << 56),
+        ((uint64_t) u8t.n128_u8[0xC] << 0) | ((uint64_t) u8.n128_u8[0x9] << 8) |
+            ((uint64_t) u8t.n128_u8[0x6] << 16) |
+            ((uint64_t) u8t.n128_u8[0x3] << 24) |
+            ((uint64_t) u8t.n128_u8[0x9] << 32) |
+            ((uint64_t) u8t.n128_u8[0x6] << 40) |
+            ((uint64_t) u8t.n128_u8[0x3] << 48) |
+            ((uint64_t) u8t.n128_u8[0xC] << 56)};
 
     dest.n128_u32[1] = dest.n128_u32[1] ^ rcon;
     dest.n128_u32[3] = dest.n128_u32[3] ^ rcon;
